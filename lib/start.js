'use strict';

process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';
process.on('unhandledRejection', function (err) {
  throw err;
});
require('./webpackConfig/env');

var fs = require('fs');
var chalk = require('chalk');
var webpack = require('webpack');
var WebpackDevServer = require('webpack-dev-server');
var clearConsole = require('react-dev-utils/clearConsole');
var checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');

var _require = require('react-dev-utils/WebpackDevServerUtils'),
    choosePort = _require.choosePort,
    createCompiler = _require.createCompiler,
    prepareProxy = _require.prepareProxy,
    prepareUrls = _require.prepareUrls;

var openBrowser = require('react-dev-utils/openBrowser');
var paths = require('./webpackConfig/paths');
var config = require('./webpackConfig/webpack.react.dev.config.js');
var createDevServerConfig = require('./webpackConfig/webpack.react.devServer.config.js');

var useYarn = fs.existsSync(paths.yarnLockFile);
var isInteractive = process.stdout.isTTY;

if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
var DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
var HOST = process.env.HOST || '0.0.0.0';

module.exports = function () {
  choosePort(HOST, DEFAULT_PORT).then(function (port) {
    if (port == null) {
      // We have not found a port.
      return;
    }
    var protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    var appName = require(paths.appPackageJson).name;
    var urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    var compiler = createCompiler(webpack, config, appName, urls, useYarn);
    // Load proxy config
    var proxySetting = require(paths.appPackageJson).proxy;
    var proxyConfig = prepareProxy(proxySetting, paths.appPublic);
    // Serve webpack assets generated by the compiler over a web sever.
    var serverConfig = createDevServerConfig(proxyConfig, urls.lanUrlForConfig);
    var devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, function (err) {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      console.log(chalk.cyan('Starting the development server...\n'));
      openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach(function (sig) {
      process.on(sig, function () {
        devServer.close();
        process.exit();
      });
    });
  }).catch(function (err) {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
};